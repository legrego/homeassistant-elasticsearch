# serializer version: 1
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[0-0.0-float-attributes0-State change-data0-options0]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '0.0',
        'valueas': dict({
          'float': 0.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[0-0.0-float-attributes0-State change-data0-options1]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '0.0',
        'valueas': dict({
          'float': 0.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[0-0.0-float-attributes0-State change-data1-options0]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 0.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 0.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[0-0.0-float-attributes0-State change-data1-options1]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 0.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 0.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[1-0.0-float-attributes1-State change-data0-options0]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '0.0',
        'valueas': dict({
          'float': 0.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[1-0.0-float-attributes1-State change-data0-options1]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '0.0',
        'valueas': dict({
          'float': 0.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[1-0.0-float-attributes1-State change-data1-options0]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 0.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 0.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[1-0.0-float-attributes1-State change-data1-options1]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 0.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 0.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[2-tomato-string-attributes2-State change-data0-options0]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[2-tomato-string-attributes2-State change-data0-options1]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[2-tomato-string-attributes2-State change-data1-options0]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[2-tomato-string-attributes2-State change-data1-options1]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[3-tomato-string-attributes3-State change-data0-options0]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[3-tomato-string-attributes3-State change-data0-options1]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[3-tomato-string-attributes3-State change-data1-options0]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[3-tomato-string-attributes3-State change-data1-options1]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[4-1.0-float-attributes4-State change-data0-options0]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '1.0',
        'valueas': dict({
          'float': 1.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[4-1.0-float-attributes4-State change-data0-options1]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '1.0',
        'valueas': dict({
          'float': 1.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[4-1.0-float-attributes4-State change-data1-options0]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 1.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 1.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[4-1.0-float-attributes4-State change-data1-options1]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 1.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 1.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[5-tomato-string-attributes5-State change-data0-options0]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[5-tomato-string-attributes5-State change-data0-options1]
  list([
    dict({
      'create': dict({
        '_index': 'metrics-homeassistant.counter-default',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[5-tomato-string-attributes5-State change-data1-options0]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Integration_Tests.Test_Publishing.test_publishing_state_change[5-tomato-string-attributes5-State change-data1-options1]
  list([
    dict({
      'index': dict({
        '_index': 'active-hass-index-v4_2',
      }),
    }),
    dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  ])
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[0-0.0-float-attributes0-Attribute change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '0.0',
        'valueas': dict({
          'float': 0.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[0-0.0-float-attributes0-Attribute change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 0.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 0.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[1-0.0-float-attributes1-Attribute change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '0.0',
        'valueas': dict({
          'float': 0.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[1-0.0-float-attributes1-Attribute change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 0.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 0.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[2-tomato-string-attributes2-Attribute change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[2-tomato-string-attributes2-Attribute change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[3-tomato-string-attributes3-State change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[3-tomato-string-attributes3-State change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[4-1.0-float-attributes4-State change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '1.0',
        'valueas': dict({
          'float': 1.0,
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[4-1.0-float-attributes4-State change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 1.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 1.0,
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[5-tomato-string-attributes5-State change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_initialized_publisher[5-tomato-string-attributes5-State change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'agent.name': 'My Home Assistant',
      'agent.type': 'hass',
      'agent.version': '2099.1.2',
      'ecs.version': '1.0.0',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
      'host.architecture': 'Test Arch',
      'host.geo.location': dict({
        'lat': 99.0,
        'lon': 99.0,
      }),
      'host.hostname': 'Test Host',
      'host.os.name': 'Test OS',
      'tags': None,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[0-0.0-float-attributes0-Attribute change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '0.0',
        'valueas': dict({
          'float': 0.0,
        }),
      }),
      'hass.object_id': 'test_1',
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[0-0.0-float-attributes0-Attribute change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 0.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 0.0,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[1-0.0-float-attributes1-Attribute change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '0.0',
        'valueas': dict({
          'float': 0.0,
        }),
      }),
      'hass.object_id': 'test_1',
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[1-0.0-float-attributes1-Attribute change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 0.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 0.0,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[2-tomato-string-attributes2-Attribute change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[2-tomato-string-attributes2-Attribute change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'event': dict({
        'action': 'Attribute change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[3-tomato-string-attributes3-State change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[3-tomato-string-attributes3-State change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[4-1.0-float-attributes4-State change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': '1.0',
        'valueas': dict({
          'float': 1.0,
        }),
      }),
      'hass.object_id': 'test_1',
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[4-1.0-float-attributes4-State change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 1.0,
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 1.0,
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[5-tomato-string-attributes5-State change-data0]
  dict({
    '_index': 'metrics-homeassistant.counter-default',
    '_op_type': 'create',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'data_stream': dict({
        'dataset': 'homeassistant.counter',
        'namespace': 'default',
        'type': 'metrics',
      }),
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'geo.location': dict({
          'lat': 99.0,
          'lon': 99.0,
        }),
        'id': 'counter.test_1',
        'value': 'tomato',
        'valueas': dict({
          'string': 'tomato',
        }),
      }),
      'hass.object_id': 'test_1',
    }),
  })
# ---
# name: Test_Unit_Tests.Test_Publisher_Document_Creation.test_state_to_bulk_action_via_uninitialized_publisher[5-tomato-string-attributes5-State change-data1]
  dict({
    '_index': 'active-hass-index-v4_2',
    '_op_type': 'index',
    '_source': dict({
      '@timestamp': '2023-04-12T12:00:00+00:00',
      'event': dict({
        'action': 'State change',
        'kind': 'event',
        'type': 'change',
      }),
      'hass.attributes': dict({
      }),
      'hass.domain': 'counter',
      'hass.entity': dict({
        'attributes': dict({
        }),
        'domain': 'counter',
        'id': 'counter.test_1',
        'value': 'tomato',
      }),
      'hass.entity_id': 'counter.test_1',
      'hass.entity_id_lower': 'counter.test_1',
      'hass.object_id': 'test_1',
      'hass.object_id_lower': 'test_1',
      'hass.value': 'tomato',
    }),
    'require_alias': True,
  })
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[0-data0-options0-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[1-data1-options1-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[10-data10-options10-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[11-data11-options11-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[12-data12-options12-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[13-data13-options13-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[14-data14-options14-test.test_2-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[2-data2-options2-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[3-data3-options3-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[4-data4-options4-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[5-data5-options5-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[6-data6-options6-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[7-data7-options7-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[8-data8-options8-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_datastream_filters[9-data9-options9-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[0-data0-options0-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[1-data1-options1-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[10-data10-options10-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[11-data11-options11-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[12-data12-options12-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[13-data13-options13-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[14-data14-options14-test.test_2-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[2-data2-options2-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[3-data3-options3-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[4-data4-options4-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[5-data5-options5-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[6-data6-options6-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[7-data7-options7-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[8-data8-options8-test.test_1-False]
  False
# ---
# name: Test_Unit_Tests.Test_Publishing_Filters.test_publishing_legacy_filters[9-data9-options9-test.test_1-True]
  True
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[-test_name-test_name]
  dict({
    'dataset': 'test_name',
    'expected': 'test_name',
  })
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[Test_Name-test_name]
  dict({
    'dataset': 'test_name',
    'expected': 'test_name',
  })
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
  dict({
    'dataset': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
    'expected': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
  })
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[test-name-test-name]
  dict({
    'dataset': 'test-name',
    'expected': 'test-name',
  })
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[test..name-test..name]
  dict({
    'dataset': 'test..name',
    'expected': 'test..name',
  })
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[test/name-testname]
  dict({
    'dataset': 'testname',
    'expected': 'testname',
  })
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[test? name-test_name]
  dict({
    'dataset': 'test_name',
    'expected': 'test_name',
  })
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[test_name-test_name]
  dict({
    'dataset': 'test_name',
    'expected': 'test_name',
  })
# ---
# name: Test_Unit_Tests.test_sanitize_datastream_name[test_name_1-test_name_1]
  dict({
    'dataset': 'test_name_1',
    'expected': 'test_name_1',
  })
# ---
