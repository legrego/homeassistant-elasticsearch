# serializer version: 1
# name: Test_Formatter.Test_Unit_Tests.test_state_to_attributes_objects
  dict({
    'orig_attributes': dict({
      'brightness': 255,
      'child': dict({
        'name': 'Alice',
      }),
      'children': list([
        dict({
          'name': 'Alice',
        }),
      ]),
      'color_temp': 4000,
      'colors': set({
        'red',
      }),
      'lights': list([
        'lamp',
        'ceiling',
      ]),
    }),
    'transformed_attributes': dict({
      'brightness': 255,
      'child': '{"name": "Alice"}',
      'children': '[{"name": "Alice"}]',
      'color_temp': 4000,
      'colors': list([
        'red',
      ]),
      'lights': list([
        'lamp',
        'ceiling',
      ]),
    }),
  })
# ---
# name: Test_Manager.Test_Unit_Tests.test_init
  dict({
    'settings': dict({
      'change_detection_type': list([
      ]),
      'excluded_domains': list([
      ]),
      'excluded_entities': list([
      ]),
      'included_domains': list([
      ]),
      'included_entities': list([
      ]),
      'polling_frequency': 60,
      'publish_frequency': 60,
    }),
    'static_fields': dict({
    }),
  })
# ---
# name: Test_Poller.Test_Integration_Tests.test_poll[states0]
  list([
  ])
# ---
# name: Test_Poller.Test_Integration_Tests.test_poll[states1]
  list([
    dict({
      'change type': 'POLLING',
      'entity_id': 'light.living_room',
      'state': 'on',
      'timestamp': HAFakeDatetime(2023, 4, 12, 12, 0, 1, tzinfo=datetime.timezone.utc),
    }),
  ])
# ---
# name: Test_Poller.Test_Integration_Tests.test_poll[states2]
  list([
    dict({
      'change type': 'POLLING',
      'entity_id': 'light.living_room',
      'state': 'on',
      'timestamp': HAFakeDatetime(2023, 4, 12, 12, 0, 1, tzinfo=datetime.timezone.utc),
    }),
    dict({
      'change type': 'POLLING',
      'entity_id': 'switch.living_room',
      'state': 'off',
      'timestamp': HAFakeDatetime(2023, 4, 12, 12, 0, 1, tzinfo=datetime.timezone.utc),
    }),
  ])
# ---
