# serializer version: 1
# name: Test_Formatter.test_format_edge_cases[With boolean state and non-compliant attributes-Entity with area and labels-Device with name, area and labels]
  dict({
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.value': 'True',
    'hass.entity.valueas.string': 'True',
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With boolean state and non-compliant attributes-Entity with area and labels-Device with name, area]
  dict({
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.value': 'True',
    'hass.entity.valueas.string': 'True',
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With boolean state and non-compliant attributes-Entity with labels-Device with name, area and labels]
  dict({
    'hass.entity.value': 'True',
    'hass.entity.valueas.string': 'True',
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With boolean state and non-compliant attributes-Entity with labels-Device with name, area]
  dict({
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.value': 'True',
    'hass.entity.valueas.string': 'True',
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With datetime state and both compliant and non-compliant attributes-Entity with area and labels-Device with name, area and labels]
  dict({
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.value': '2024-04-12T00:00:00+00:00',
    'hass.entity.valueas.date': '2024-04-12',
    'hass.entity.valueas.datetime': '2024-04-12T00:00:00+00:00',
    'hass.entity.valueas.time': '00:00:00',
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With datetime state and both compliant and non-compliant attributes-Entity with area and labels-Device with name, area]
  dict({
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.value': '2024-04-12T00:00:00+00:00',
    'hass.entity.valueas.date': '2024-04-12',
    'hass.entity.valueas.datetime': '2024-04-12T00:00:00+00:00',
    'hass.entity.valueas.time': '00:00:00',
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With datetime state and both compliant and non-compliant attributes-Entity with labels-Device with name, area and labels]
  dict({
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.value': '2024-04-12T00:00:00+00:00',
    'hass.entity.valueas.date': '2024-04-12',
    'hass.entity.valueas.datetime': '2024-04-12T00:00:00+00:00',
    'hass.entity.valueas.time': '00:00:00',
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With datetime state and both compliant and non-compliant attributes-Entity with labels-Device with name, area]
  dict({
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.value': '2024-04-12T00:00:00+00:00',
    'hass.entity.valueas.date': '2024-04-12',
    'hass.entity.valueas.datetime': '2024-04-12T00:00:00+00:00',
    'hass.entity.valueas.time': '00:00:00',
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With int state and comprehensive compliant attributes-Entity with area and labels-Device with name, area and labels]
  dict({
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.attributes.bool': True,
    'hass.entity.attributes.collision_test': 'second value',
    'hass.entity.attributes.complex_dict': '{"string": "abc123", "int": 123, "float": 123.456, "list": [1, 2, 3, 4], "set": [5], "tuple": [6, 6], "list_of_tuples": [[7, 7], [8, 8]], "list_of_sets": [[9], [10]], "another_dict": "{\\"string\\": \\"abc123\\", \\"int\\": 123, \\"list_of_sets\\": [[9], [10]]}"}',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.list': list([
      1,
      4,
    ]),
    'hass.entity.attributes.list_of_sets': list([
      list([
        9,
      ]),
      list([
        10,
      ]),
    ]),
    'hass.entity.attributes.list_of_tuples': list([
      tuple(
        7,
        7,
      ),
      tuple(
        8,
        8,
      ),
    ]),
    'hass.entity.attributes.non_ecs_compliant_attribute_name': True,
    'hass.entity.attributes.set': list([
      5,
    ]),
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.attributes.tuple': tuple(
      6,
      6,
    ),
    'hass.entity.value': '123',
    'hass.entity.valueas.float': 123.0,
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With int state and comprehensive compliant attributes-Entity with area and labels-Device with name, area]
  dict({
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.attributes.bool': True,
    'hass.entity.attributes.collision_test': 'second value',
    'hass.entity.attributes.complex_dict': '{"string": "abc123", "int": 123, "float": 123.456, "list": [1, 2, 3, 4], "set": [5], "tuple": [6, 6], "list_of_tuples": [[7, 7], [8, 8]], "list_of_sets": [[9], [10]], "another_dict": "{\\"string\\": \\"abc123\\", \\"int\\": 123, \\"list_of_sets\\": [[9], [10]]}"}',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.list': list([
      1,
      4,
    ]),
    'hass.entity.attributes.list_of_sets': list([
      list([
        9,
      ]),
      list([
        10,
      ]),
    ]),
    'hass.entity.attributes.list_of_tuples': list([
      tuple(
        7,
        7,
      ),
      tuple(
        8,
        8,
      ),
    ]),
    'hass.entity.attributes.non_ecs_compliant_attribute_name': True,
    'hass.entity.attributes.set': list([
      5,
    ]),
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.attributes.tuple': tuple(
      6,
      6,
    ),
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.value': '123',
    'hass.entity.valueas.float': 123.0,
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With int state and comprehensive compliant attributes-Entity with labels-Device with name, area and labels]
  dict({
    'hass.entity.attributes.bool': True,
    'hass.entity.attributes.collision_test': 'second value',
    'hass.entity.attributes.complex_dict': '{"string": "abc123", "int": 123, "float": 123.456, "list": [1, 2, 3, 4], "set": [5], "tuple": [6, 6], "list_of_tuples": [[7, 7], [8, 8]], "list_of_sets": [[9], [10]], "another_dict": "{\\"string\\": \\"abc123\\", \\"int\\": 123, \\"list_of_sets\\": [[9], [10]]}"}',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.list': list([
      1,
      4,
    ]),
    'hass.entity.attributes.list_of_sets': list([
      list([
        9,
      ]),
      list([
        10,
      ]),
    ]),
    'hass.entity.attributes.list_of_tuples': list([
      tuple(
        7,
        7,
      ),
      tuple(
        8,
        8,
      ),
    ]),
    'hass.entity.attributes.non_ecs_compliant_attribute_name': True,
    'hass.entity.attributes.set': list([
      5,
    ]),
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.attributes.tuple': tuple(
      6,
      6,
    ),
    'hass.entity.value': '123',
    'hass.entity.valueas.float': 123.0,
  })
# ---
# name: Test_Formatter.test_format_edge_cases[With int state and comprehensive compliant attributes-Entity with labels-Device with name, area]
  dict({
    'hass.entity.attributes.bool': True,
    'hass.entity.attributes.collision_test': 'second value',
    'hass.entity.attributes.complex_dict': '{"string": "abc123", "int": 123, "float": 123.456, "list": [1, 2, 3, 4], "set": [5], "tuple": [6, 6], "list_of_tuples": [[7, 7], [8, 8]], "list_of_sets": [[9], [10]], "another_dict": "{\\"string\\": \\"abc123\\", \\"int\\": 123, \\"list_of_sets\\": [[9], [10]]}"}',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.list': list([
      1,
      4,
    ]),
    'hass.entity.attributes.list_of_sets': list([
      list([
        9,
      ]),
      list([
        10,
      ]),
    ]),
    'hass.entity.attributes.list_of_tuples': list([
      tuple(
        7,
        7,
      ),
      tuple(
        8,
        8,
      ),
    ]),
    'hass.entity.attributes.non_ecs_compliant_attribute_name': True,
    'hass.entity.attributes.set': list([
      5,
    ]),
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.attributes.tuple': tuple(
      6,
      6,
    ),
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.value': '123',
    'hass.entity.valueas.float': 123.0,
  })
# ---
# name: Test_Formatter.test_format_simple_cases[Update float state; without attributes-Entity with area, floor, and labels-Device with name, area, floor, and labels]
  dict({
    '@timestamp': '2023-04-12T12:00:00+00:00',
    'data_stream.dataset': 'homeassistant.counter',
    'data_stream.namespace': 'default',
    'data_stream.type': 'metrics',
    'event.action': 'State change',
    'event.kind': 'event',
    'event.type': 'change',
    'hass.entity.area.floor.id': 'entity_floor',
    'hass.entity.area.floor.name': 'entity floor',
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.device.area.floor.id': 'device_floor',
    'hass.entity.device.area.floor.name': 'device floor',
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.device.id': 'very_unique_device_id',
    'hass.entity.device.labels': list([
      'device label 1',
      'device label 2',
      'device label 3',
    ]),
    'hass.entity.device.name': 'device name',
    'hass.entity.device_class': 'user-modified entity device class',
    'hass.entity.domain': 'counter',
    'hass.entity.friendly_name': 'entity object id',
    'hass.entity.id': 'counter.entity_object_id',
    'hass.entity.labels': list([
      'entity label 1',
      'entity label 2',
      'entity label 3',
    ]),
    'hass.entity.name': 'user-modified entity name',
    'hass.entity.object.id': 'entity_object_id',
    'hass.entity.platform': 'entity platform',
    'hass.entity.unit_of_measurement': 'Mbit/s',
    'hass.entity.value': '123.456',
    'hass.entity.valueas.float': 123.456,
  })
# ---
# name: Test_Formatter.test_format_simple_cases[Update float state; without attributes-Entity with area, floor, and labels-Device with name]
  dict({
    '@timestamp': '2023-04-12T12:00:00+00:00',
    'data_stream.dataset': 'homeassistant.counter',
    'data_stream.namespace': 'default',
    'data_stream.type': 'metrics',
    'event.action': 'State change',
    'event.kind': 'event',
    'event.type': 'change',
    'hass.entity.area.floor.id': 'entity_floor',
    'hass.entity.area.floor.name': 'entity floor',
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.device.id': 'very_unique_device_id',
    'hass.entity.device.name': 'device name',
    'hass.entity.device_class': 'user-modified entity device class',
    'hass.entity.domain': 'counter',
    'hass.entity.friendly_name': 'entity object id',
    'hass.entity.id': 'counter.entity_object_id',
    'hass.entity.labels': list([
      'entity label 1',
      'entity label 2',
      'entity label 3',
    ]),
    'hass.entity.name': 'user-modified entity name',
    'hass.entity.object.id': 'entity_object_id',
    'hass.entity.platform': 'entity platform',
    'hass.entity.unit_of_measurement': 'Mbit/s',
    'hass.entity.value': '123.456',
    'hass.entity.valueas.float': 123.456,
  })
# ---
# name: Test_Formatter.test_format_simple_cases[Update float state; without attributes-Entity with no area, floor, or labels-Device with name, area, floor, and labels]
  dict({
    '@timestamp': '2023-04-12T12:00:00+00:00',
    'data_stream.dataset': 'homeassistant.counter',
    'data_stream.namespace': 'default',
    'data_stream.type': 'metrics',
    'event.action': 'State change',
    'event.kind': 'event',
    'event.type': 'change',
    'hass.entity.device.area.floor.id': 'device_floor',
    'hass.entity.device.area.floor.name': 'device floor',
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.device.id': 'very_unique_device_id',
    'hass.entity.device.labels': list([
      'device label 1',
      'device label 2',
      'device label 3',
    ]),
    'hass.entity.device.name': 'device name',
    'hass.entity.device_class': 'user-modified entity device class',
    'hass.entity.domain': 'counter',
    'hass.entity.friendly_name': 'entity object id',
    'hass.entity.id': 'counter.entity_object_id',
    'hass.entity.name': 'user-modified entity name',
    'hass.entity.object.id': 'entity_object_id',
    'hass.entity.platform': 'entity platform',
    'hass.entity.unit_of_measurement': 'Mbit/s',
    'hass.entity.value': '123.456',
    'hass.entity.valueas.float': 123.456,
  })
# ---
# name: Test_Formatter.test_format_simple_cases[Update float state; without attributes-Entity with no area, floor, or labels-Device with name]
  dict({
    '@timestamp': '2023-04-12T12:00:00+00:00',
    'data_stream.dataset': 'homeassistant.counter',
    'data_stream.namespace': 'default',
    'data_stream.type': 'metrics',
    'event.action': 'State change',
    'event.kind': 'event',
    'event.type': 'change',
    'hass.entity.device.id': 'very_unique_device_id',
    'hass.entity.device.name': 'device name',
    'hass.entity.device_class': 'user-modified entity device class',
    'hass.entity.domain': 'counter',
    'hass.entity.friendly_name': 'entity object id',
    'hass.entity.id': 'counter.entity_object_id',
    'hass.entity.name': 'user-modified entity name',
    'hass.entity.object.id': 'entity_object_id',
    'hass.entity.platform': 'entity platform',
    'hass.entity.unit_of_measurement': 'Mbit/s',
    'hass.entity.value': '123.456',
    'hass.entity.valueas.float': 123.456,
  })
# ---
# name: Test_Formatter.test_format_simple_cases[Update string state; with attributes-Entity with area, floor, and labels-Device with name, area, floor, and labels]
  dict({
    '@timestamp': '2023-04-12T12:00:00+00:00',
    'data_stream.dataset': 'homeassistant.counter',
    'data_stream.namespace': 'default',
    'data_stream.type': 'metrics',
    'event.action': 'State change',
    'event.kind': 'event',
    'event.type': 'change',
    'hass.entity.area.floor.id': 'entity_floor',
    'hass.entity.area.floor.name': 'entity floor',
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.device.area.floor.id': 'device_floor',
    'hass.entity.device.area.floor.name': 'device floor',
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.device.id': 'very_unique_device_id',
    'hass.entity.device.labels': list([
      'device label 1',
      'device label 2',
      'device label 3',
    ]),
    'hass.entity.device.name': 'device name',
    'hass.entity.device_class': 'user-modified entity device class',
    'hass.entity.domain': 'counter',
    'hass.entity.friendly_name': 'entity object id',
    'hass.entity.id': 'counter.entity_object_id',
    'hass.entity.labels': list([
      'entity label 1',
      'entity label 2',
      'entity label 3',
    ]),
    'hass.entity.name': 'user-modified entity name',
    'hass.entity.object.id': 'entity_object_id',
    'hass.entity.platform': 'entity platform',
    'hass.entity.unit_of_measurement': 'Mbit/s',
    'hass.entity.value': 'string state value',
    'hass.entity.valueas.string': 'string state value',
  })
# ---
# name: Test_Formatter.test_format_simple_cases[Update string state; with attributes-Entity with area, floor, and labels-Device with name]
  dict({
    '@timestamp': '2023-04-12T12:00:00+00:00',
    'data_stream.dataset': 'homeassistant.counter',
    'data_stream.namespace': 'default',
    'data_stream.type': 'metrics',
    'event.action': 'State change',
    'event.kind': 'event',
    'event.type': 'change',
    'hass.entity.area.floor.id': 'entity_floor',
    'hass.entity.area.floor.name': 'entity floor',
    'hass.entity.area.id': 'entity_area',
    'hass.entity.area.name': 'entity area',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.device.id': 'very_unique_device_id',
    'hass.entity.device.name': 'device name',
    'hass.entity.device_class': 'user-modified entity device class',
    'hass.entity.domain': 'counter',
    'hass.entity.friendly_name': 'entity object id',
    'hass.entity.id': 'counter.entity_object_id',
    'hass.entity.labels': list([
      'entity label 1',
      'entity label 2',
      'entity label 3',
    ]),
    'hass.entity.name': 'user-modified entity name',
    'hass.entity.object.id': 'entity_object_id',
    'hass.entity.platform': 'entity platform',
    'hass.entity.unit_of_measurement': 'Mbit/s',
    'hass.entity.value': 'string state value',
    'hass.entity.valueas.string': 'string state value',
  })
# ---
# name: Test_Formatter.test_format_simple_cases[Update string state; with attributes-Entity with no area, floor, or labels-Device with name, area, floor, and labels]
  dict({
    '@timestamp': '2023-04-12T12:00:00+00:00',
    'data_stream.dataset': 'homeassistant.counter',
    'data_stream.namespace': 'default',
    'data_stream.type': 'metrics',
    'event.action': 'State change',
    'event.kind': 'event',
    'event.type': 'change',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.device.area.floor.id': 'device_floor',
    'hass.entity.device.area.floor.name': 'device floor',
    'hass.entity.device.area.id': 'device_area',
    'hass.entity.device.area.name': 'device area',
    'hass.entity.device.id': 'very_unique_device_id',
    'hass.entity.device.labels': list([
      'device label 1',
      'device label 2',
      'device label 3',
    ]),
    'hass.entity.device.name': 'device name',
    'hass.entity.device_class': 'user-modified entity device class',
    'hass.entity.domain': 'counter',
    'hass.entity.friendly_name': 'entity object id',
    'hass.entity.id': 'counter.entity_object_id',
    'hass.entity.name': 'user-modified entity name',
    'hass.entity.object.id': 'entity_object_id',
    'hass.entity.platform': 'entity platform',
    'hass.entity.unit_of_measurement': 'Mbit/s',
    'hass.entity.value': 'string state value',
    'hass.entity.valueas.string': 'string state value',
  })
# ---
# name: Test_Formatter.test_format_simple_cases[Update string state; with attributes-Entity with no area, floor, or labels-Device with name]
  dict({
    '@timestamp': '2023-04-12T12:00:00+00:00',
    'data_stream.dataset': 'homeassistant.counter',
    'data_stream.namespace': 'default',
    'data_stream.type': 'metrics',
    'event.action': 'State change',
    'event.kind': 'event',
    'event.type': 'change',
    'hass.entity.attributes.float': 123.456,
    'hass.entity.attributes.int': 123,
    'hass.entity.attributes.string': 'abc123',
    'hass.entity.device.id': 'very_unique_device_id',
    'hass.entity.device.name': 'device name',
    'hass.entity.device_class': 'user-modified entity device class',
    'hass.entity.domain': 'counter',
    'hass.entity.friendly_name': 'entity object id',
    'hass.entity.id': 'counter.entity_object_id',
    'hass.entity.name': 'user-modified entity name',
    'hass.entity.object.id': 'entity_object_id',
    'hass.entity.platform': 'entity platform',
    'hass.entity.unit_of_measurement': 'Mbit/s',
    'hass.entity.value': 'string state value',
    'hass.entity.valueas.string': 'string state value',
  })
# ---
# name: Test_Formatter.test_state_to_attributes_matrix[Update float state; without attributes]
  dict({
  })
# ---
# name: Test_Formatter.test_state_to_attributes_matrix[Update string state; with attributes]
  dict({
    'float': 123.456,
    'int': 123,
    'string': 'abc123',
  })
# ---
# name: Test_Formatter.test_state_to_attributes_matrix[With boolean state and non-compliant attributes]
  dict({
  })
# ---
# name: Test_Formatter.test_state_to_attributes_matrix[With datetime state and both compliant and non-compliant attributes]
  dict({
    'float': 123.456,
    'int': 123,
    'string': 'abc123',
  })
# ---
# name: Test_Formatter.test_state_to_attributes_matrix[With int state and comprehensive compliant attributes]
  dict({
    'bool': True,
    'collision_test': 'second value',
    'complex_dict': '{"string": "abc123", "int": 123, "float": 123.456, "list": [1, 2, 3, 4], "set": [5], "tuple": [6, 6], "list_of_tuples": [[7, 7], [8, 8]], "list_of_sets": [[9], [10]], "another_dict": "{\\"string\\": \\"abc123\\", \\"int\\": 123, \\"list_of_sets\\": [[9], [10]]}"}',
    'float': 123.456,
    'int': 123,
    'list': list([
      1,
      4,
    ]),
    'list_of_sets': list([
      list([
        9,
      ]),
      list([
        10,
      ]),
    ]),
    'list_of_tuples': list([
      tuple(
        7,
        7,
      ),
      tuple(
        8,
        8,
      ),
    ]),
    'non_ecs_compliant_attribute_name': True,
    'none': None,
    'set': list([
      5,
    ]),
    'string': 'abc123',
    'tuple': tuple(
      6,
      6,
    ),
  })
# ---
# name: Test_Formatter.test_state_to_extended_details
  dict({
    'area': dict({
      'floor': dict({
        'id': 'entity_floor',
        'name': 'entity floor',
      }),
      'id': 'entity_area',
      'name': 'entity area',
    }),
    'device': None,
    'device_class': 'user-modified entity device class',
    'domain': 'counter',
    'friendly_name': 'entity object id',
    'id': 'counter.entity_object_id',
    'labels': list([
      'entity label 1',
      'entity label 2',
      'entity label 3',
    ]),
    'location': list([
      1.0,
      1.0,
    ]),
    'name': 'user-modified entity name',
    'platform': 'entity platform',
    'unit_of_measurement': 'Mbit/s',
  })
# ---
# name: Test_Poller.Test_Integration_Tests.test_poll[Multiple states]
  list([
    dict({
      'change type': 'polling',
      'entity_id': 'light.living_room',
      'state': 'on',
      'timestamp': HAFakeDatetime(2023, 4, 12, 12, 0, 1, tzinfo=datetime.timezone.utc),
    }),
    dict({
      'change type': 'polling',
      'entity_id': 'switch.living_room',
      'state': 'off',
      'timestamp': HAFakeDatetime(2023, 4, 12, 12, 0, 1, tzinfo=datetime.timezone.utc),
    }),
  ])
# ---
# name: Test_Poller.Test_Integration_Tests.test_poll[No states]
  list([
  ])
# ---
# name: Test_Poller.Test_Integration_Tests.test_poll[One state]
  list([
    dict({
      'change type': 'polling',
      'entity_id': 'light.living_room',
      'state': 'on',
      'timestamp': HAFakeDatetime(2023, 4, 12, 12, 0, 1, tzinfo=datetime.timezone.utc),
    }),
  ])
# ---
